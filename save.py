from hikka import loader, utils
from telethon.tl.types import Message, PeerUser
from datetime import datetime, timedelta
import asyncio
import logging
from cryptography.fernet import Fernet
import json
import re

logger = logging.getLogger(__name__)

class HikkaGuardianDB:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º"""
    def __init__(self):
        self.key = Fernet.generate_key()
        self.cipher = Fernet(self.key)
        self.data = {
            "filters": {"important": [], "neutral": [], "blocked": []},
            "reminders": {},
            "diary": []
        }
    
    def save(self):
        with open("hikkaguardian.enc", "wb") as f:
            f.write(self.cipher.encrypt(json.dumps(self.data).encode()))

    def load(self):
        try:
            with open("hikkaguardian.enc", "rb") as f:
                self.data = json.loads(self.cipher.decrypt(f.read()).decode())
        except FileNotFoundError:
            self.save()

@loader.tds
class HikkaGuardianMod(loader.Module):
    """–¶–∏—Ñ—Ä–æ–≤–æ–π —â–∏—Ç –¥–ª—è –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç–æ–≤"""
    strings = {
        "name": "HikkaGuardian",
        "meal_time": "üç± <b>–í—Ä–µ–º—è –ø–æ–µ—Å—Ç—å!</b>\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {}",
        "sleep_time": "üåô <b>–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≥–æ—Ç–æ–≤—å—Å—è –∫–æ —Å–Ω—É</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ: {}¬∞C"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "MEAL_TIMES", ["10:00", "13:00", "19:00"], "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –µ–¥–µ",
            "SLEEP_TIME", "23:00", "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–Ω–µ",
            "ALLOW_AUTO_DELETE", True, "–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–æ–≤"
        )
        self.db = HikkaGuardianDB()
        self.reminder_task = None

    async def client_ready(self, client, db):
        self.client = client
        self.db.load()
        self._schedule_reminders()

    def _schedule_reminders(self):
        async def reminder_loop():
            while True:
                now = datetime.now().strftime("%H:%M")
                if now in self.config["MEAL_TIMES"]:
                    await self.client.send_message(
                        "me",
                        self.strings["meal_time"].format("–≥—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞ —Å –æ–≤–æ—â–∞–º–∏")
                    )
                if now == self.config["SLEEP_TIME"]:
                    await self.client.send_message(
                        "me",
                        self.strings["sleep_time"].format(22)
                    )
                await asyncio.sleep(60)
        
        self.reminder_task = asyncio.create_task(reminder_loop())

    async def watcher(self, message: Message):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not isinstance(message.peer_id, PeerUser):
            return

        text = (message.text or "").lower()
        sender = await message.get_sender()

        # –í–∞–∂–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        if str(sender.id) in self.db.data["filters"]["important"]:
            await message.pin()
            return

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤
        blocked_pattern = "|".join(self.db.data["filters"]["blocked"])
        if re.search(blocked_pattern, text, re.IGNORECASE):
            await message.delete()
            await self.client.send_message(
                "me",
                f"üö´ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender.first_name}: {text[:50]}..."
            )

    @loader.unrestricted
    async def hgfiltercmd(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã .hgfilter <—Ç–∏–ø> <—Å–ø–∏—Å–æ–∫>"""
        args = utils.get_args_raw(message).split(" ", 1)
        if len(args) < 2:
            await utils.answer(message, "‚ùå –§–æ—Ä–º–∞—Ç: .hgfilter <important|neutral|blocked> <—Å–ø–∏—Å–æ–∫>")
            return

        filter_type, content = args
        if filter_type not in self.db.data["filters"]:
            await utils.answer(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–æ: {', '.join(self.db.data['filters'].keys())}")
            return

        self.db.data["filters"][filter_type] = [x.strip() for x in content.split(",")]
        self.db.save()
        await utils.answer(message, f"‚úÖ –§–∏–ª—å—Ç—Ä '{filter_type}' –æ–±–Ω–æ–≤–ª–µ–Ω!")

    @loader.unrestricted
    async def hgdiarycmd(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ .hgdiary <—Ç–µ–∫—Å—Ç>"""
        entry = utils.get_args_raw(message)
        if not entry:
            await utils.answer(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏")
            return

        self.db.data["diary"].append({
            "date": datetime.now().isoformat(),
            "text": entry
        })
        self.db.save()
        await utils.answer(message, "üìñ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫")

    @loader.unrestricted
    async def hgstatcmd(self, message: Message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        stats = (
            f"üå∏ <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"–ó–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ: {len(self.db.data['diary'])}\n"
            f"–í–∞–∂–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(self.db.data['filters']['important']}\n"
            f"–ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤: {len(self.db.data['filters']['blocked']}"
        )
        await utils.answer(message, stats)

async def setup(client):
    await client.load_module(HikkaGuardianMod())
