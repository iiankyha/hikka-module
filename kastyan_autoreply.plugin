; metadata
id = kastyan_autoreply
name = AutoReply by Kastyan
version = 1.0
author = Kastyan
description = –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –ö–æ–º–∞–Ω–¥—ã: .lock @user —Ç–µ–∫—Å—Ç, .unlock @user, .locklist
min_version = 11.12.0
icon = plugin232/2

; code
import json
import time
from exteragram import ExteraGramPlugin
from android_utils import log
from ui.bulletin import BulletinHelper

class AutoReplyPlugin(ExteraGramPlugin):
    def on_plugin_load(self):
        self.locked_users = {}
        self.last_reply = {}
        self.load_data()
        log("[AutoReply] –ü–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω")

    def load_data(self):
        try:
            data = json.loads(self.read_file("autoreply.json") or "{}")
            self.locked_users = data.get("users", {})
            self.last_reply = data.get("time", {})
        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    def save_data(self):
        try:
            self.write_file("autoreply.json", json.dumps({
                "users": self.locked_users,
                "time": self.last_reply
            }))
        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    @ExteraGramPlugin.on_command("lock")
    async def lock_cmd(self, client, message):
        """–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç: .lock @user —Ç–µ–∫—Å—Ç"""
        try:
            args = message.text.split(maxsplit=2)
            if len(args) < 3:
                await message.edit("‚ùå –§–æ—Ä–º–∞—Ç: .lock @user —Ç–µ–∫—Å—Ç")
                return
            
            user = args[1].strip('@')
            text = args[2]
            chat_id = str(message.chat.id)
            
            if chat_id not in self.locked_users:
                self.locked_users[chat_id] = {}
                
            self.locked_users[chat_id][user] = text
            self.save_data()
            await message.edit(f"‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–ª—è @{user} –¥–æ–±–∞–≤–ª–µ–Ω")
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @ExteraGramPlugin.on_command("unlock")
    async def unlock_cmd(self, client, message):
        """–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç: .unlock @user"""
        try:
            args = message.text.split(maxsplit=1)
            if len(args) < 2:
                await message.edit("‚ùå –§–æ—Ä–º–∞—Ç: .unlock @user")
                return
            
            user = args[1].strip('@')
            chat_id = str(message.chat.id)
            
            if chat_id in self.locked_users and user in self.locked_users[chat_id]:
                del self.locked_users[chat_id][user]
                self.save_data()
                await message.edit(f"‚ùå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–ª—è @{user} —É–¥–∞–ª—ë–Ω")
            else:
                await message.edit("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @ExteraGramPlugin.on_command("locklist")
    async def list_cmd(self, client, message):
        """–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤: .locklist"""
        try:
            chat_id = str(message.chat.id)
            if chat_id in self.locked_users and self.locked_users[chat_id]:
                users = [f"‚Ä¢ @{u}: {t}" for u, t in self.locked_users[chat_id].items()]
                await message.edit("üîí –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã:\n" + "\n".join(users))
            else:
                await message.edit("üì≠ –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç")
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @ExteraGramPlugin.on_message()
    async def watcher(self, client, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            chat_id = str(message.chat.id)
            user_id = str(message.from_user.id)
            current_time = time.time()
            
            if (chat_id in self.locked_users and 
                user_id in self.locked_users[chat_id] and
                current_time - self.last_reply.get(user_id, 0) > 1.0):
                
                self.last_reply[user_id] = current_time
                await message.reply(self.locked_users[chat_id][user_id])
        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")

def __load__():
    return AutoReplyPlugin()
