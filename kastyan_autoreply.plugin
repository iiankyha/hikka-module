# -*- coding: utf-8 -*-
# @id kastyan_autoreply
# @name AutoReply by Kastyan
# @version 1.0
# @author Kastyan
# @description –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –ö–æ–º–∞–Ω–¥—ã: .lock @user —Ç–µ–∫—Å—Ç, .unlock @user, .locklist
# @min_version 11.12.0
# @icon plugin232/2

import json
import time
from base_plugin import BasePlugin
from android_utils import log
from ui.bulletin import BulletinHelper

class AutoReplyPlugin(BasePlugin):
    def on_plugin_load(self):
        self.locked_users = {}
        self.last_reply = {}
        self.load_data()
        log("[AutoReply] –ü–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω")
        BulletinHelper.show_success("AutoReply loaded!")

    def load_data(self):
        try:
            # –ß—Ç–µ–Ω–∏–µ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ AYUGram
            data = json.loads(self.read_setting("autoreply_data", "{}"))
            self.locked_users = data.get("users", {})
            self.last_reply = data.get("time", {})
        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    def save_data(self):
        try:
            self.save_setting("autoreply_data", json.dumps({
                "users": self.locked_users,
                "time": self.last_reply
            }))
        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def on_send_message(self, account, peer_id, message):
        try:
            msg = message.strip()
            
            if msg.startswith('.lock ') and len(msg.split()) >= 3:
                _, user, *text = msg.split(maxsplit=2)
                chat_id = str(peer_id)
                self.locked_users.setdefault(chat_id, {})[user.strip('@')] = text[0]
                self.save_data()
                BulletinHelper.show_success(f"‚úÖ –û—Ç–≤–µ—Ç –¥–ª—è {user} –¥–æ–±–∞–≤–ª–µ–Ω")
                return ""  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

            elif msg.startswith('.unlock '):
                user = msg.split()[1].strip('@')
                chat_id = str(peer_id)
                if chat_id in self.locked_users and user in self.locked_users[chat_id]:
                    del self.locked_users[chat_id][user]
                    self.save_data()
                    BulletinHelper.show_success(f"‚ùå –û—Ç–≤–µ—Ç –¥–ª—è @{user} —É–¥–∞–ª—ë–Ω")
                else:
                    BulletinHelper.show_error("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ""

            elif msg == '.locklist':
                chat_id = str(peer_id)
                if chat_id in self.locked_users and self.locked_users[chat_id]:
                    users = [f"@{u}" for u in self.locked_users[chat_id].keys()]
                    BulletinHelper.show_info("üîí –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã: " + ", ".join(users))
                else:
                    BulletinHelper.show_info("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
                return ""

        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {e}")
            BulletinHelper.show_error(f"üö´ –û—à–∏–±–∫–∞: {e}")
        
        return None

    def on_message(self, account, peer_id, sender_id, message):
        try:
            chat_id = str(peer_id)
            user_id = str(sender_id)
            current_time = time.time()

            if (chat_id in self.locked_users and 
                user_id in self.locked_users[chat_id] and
                current_time - self.last_reply.get(user_id, 0) > 1.0):
                
                self.last_reply[user_id] = current_time
                return self.locked_users[chat_id][user_id]
                
        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        
        return None

def __load__():
    return AutoReplyPlugin()
