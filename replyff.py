from hikkatl.types import Message
from hikkatl.utils import get_display_name
from hikkatl.errors import UserIdInvalidError
from .. import loader, utils
import time

@loader.tds
class AutoReplyLockMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    strings = {
        "name": "AutoReplyLock",
        "user_locked": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º: {}",
        "user_not_found": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "no_args": "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞",
        "user_unlocked": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞",
        "not_in_list": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
        "lock_list": "üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n",
        "list_empty": "‚ùå –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç",
        "cooldown": "‚è±Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ"
    }

    def __init__(self):
        self.locked_users = {}
        self.last_message_time = {}
        self.cooldown = 1.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

    async def client_ready(self, client, db):
        self.db = db
        self.locked_users = self.db.get("AutoReplyLock", "locked", {})

    async def lockcmd(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .lock @username <—Ç–µ–∫—Å—Ç>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("no_args"))
            return

        try:
            user, text = args.split(maxsplit=1)
        except ValueError:
            await utils.answer(message, self.strings("no_args"))
            return

        try:
            user = await message.client.get_entity(user)
        except (TypeError, ValueError, UserIdInvalidError):
            await utils.answer(message, self.strings("user_not_found"))
            return

        user_id = user.id
        chat_id = utils.get_chat_id(message)

        if str(chat_id) not in self.locked_users:
            self.locked_users[str(chat_id)] = {}

        self.locked_users[str(chat_id)][str(user_id)] = text
        self.db.set("AutoReplyLock", "locked", self.locked_users)
        
        await utils.answer(
            message,
            self.strings("user_locked").format(
                f"@{user.username}" if user.username else get_display_name(user),
                text
            )
        )

    async def unlockcmd(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .unlock @username"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("no_args"))
            return

        try:
            user = await message.client.get_entity(args.strip())
        except (TypeError, ValueError, UserIdInvalidError):
            await utils.answer(message, self.strings("user_not_found"))
            return

        chat_id = utils.get_chat_id(message)
        user_id = user.id
        
        if (str(chat_id) in self.locked_users and 
            str(user_id) in self.locked_users[str(chat_id)]):
            del self.locked_users[str(chat_id)][str(user_id)]
            
            if not self.locked_users[str(chat_id)]:
                del self.locked_users[str(chat_id)]
                
            self.db.set("AutoReplyLock", "locked", self.locked_users)
            await utils.answer(
                message,
                self.strings("user_unlocked").format(
                    f"@{user.username}" if user.username else get_display_name(user)
                )
            )
        else:
            await utils.answer(message, self.strings("not_in_list"))

    async def locklistcmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        chat_id = utils.get_chat_id(message)
        if str(chat_id) not in self.locked_users or not self.locked_users[str(chat_id)]:
            await utils.answer(message, self.strings("list_empty"))
            return

        res = self.strings("lock_list")
        for user_id, text in self.locked_users[str(chat_id)].items():
            try:
                user = await message.client.get_entity(int(user_id))
                name = f"@{user.username}" if user.username else get_display_name(user)
                res += f"‚Ä¢ {name}: {text}\n"
            except: 
                res += f"‚Ä¢ ID:{user_id}: {text}\n"

        await utils.answer(message, res)

    @loader.watcher()
    async def watcher(self, message: Message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ
        if not isinstance(message, Message) or message.out or not message.sender_id:
            return

        chat_id = utils.get_chat_id(message)
        user_id = message.sender_id
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª—ã
        if user_id <= 0:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ
        chat_str = str(chat_id)
        user_str = str(user_id)
        
        if chat_str not in self.locked_users or user_str not in self.locked_users[chat_str]:
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        current_time = time.time()
        last_time = self.last_message_time.get(user_str, 0)
        
        if current_time - last_time < self.cooldown:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            return
            
        self.last_message_time[user_str] = current_time

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        text = self.locked_users[chat_str][user_str]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
        try:
            await message.client.send_message(
                entity=chat_id,
                message=text,
                reply_to=message.id
            )
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
            pass
