from hikkatl.types import Message
from hikkatl.utils import get_display_name
from hikkatl.errors import UserIdInvalidError
from .. import loader, utils
import time

@loader.tds
class AutoReplyLockMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    strings = {
        "name": "AutoReplyLock",
        "user_locked": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º: {}",
        "user_not_found": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "no_args": "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "user_unlocked": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞",
        "not_in_list": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
        "lock_list": "üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ {}:\n\n",
        "list_empty": "‚ùå –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞",
        "cooldown": "‚è±Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ",
        "reply_required": "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username"
    }

    def __init__(self):
        self.locked_users = {}
        self.last_message_time = {}
        self.cooldown = 1.0
        self._me = None
        self._client = None

    async def client_ready(self, client, db):
        self.db = db
        self._client = client
        self.locked_users = self.db.get("AutoReplyLock", "locked", {})
        self._me = (await client.get_me()).id

    async def _notify(self, text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        await self._client.send_message("me", text)

    async def lockcmd(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .lock [@username|–æ—Ç–≤–µ—Ç] <—Ç–µ–∫—Å—Ç>"""
        args = utils.get_args_raw(message)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.is_reply:
            reply = await message.get_reply_message()
            user = reply.sender
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if not args:
                await self._notify(self.strings("no_args"))
                return
                
            text = args
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not args:
                await self._notify(self.strings("reply_required"))
                return
                
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç
                user_part, text = args.split(maxsplit=1)
            except ValueError:
                await self._notify(self.strings("no_args"))
                return
                
            try:
                user = await message.client.get_entity(user_part)
            except (TypeError, ValueError, UserIdInvalidError):
                await self._notify(self.strings("user_not_found"))
                return

        user_id = user.id
        chat_id = utils.get_chat_id(message)

        if str(chat_id) not in self.locked_users:
            self.locked_users[str(chat_id)] = {}

        self.locked_users[str(chat_id)][str(user_id)] = text
        self.db.set("AutoReplyLock", "locked", self.locked_users)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await message.get_chat()
        chat_title = chat.title if hasattr(chat, 'title') else "Private Chat"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        await self._notify(
            self.strings("user_locked").format(
                f"@{user.username}" if user.username else get_display_name(user),
                text
            ) + f"\n\n–ß–∞—Ç: {chat_title} (ID: {chat_id})"
        )

    async def unlockcmd(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .unlock [@username|–æ—Ç–≤–µ—Ç]"""
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.is_reply:
            reply = await message.get_reply_message()
            user = reply.sender
        else:
            args = utils.get_args_raw(message)
            if not args:
                await self._notify(self.strings("reply_required"))
                return
                
            try:
                user = await message.client.get_entity(args.strip())
            except (TypeError, ValueError, UserIdInvalidError):
                await self._notify(self.strings("user_not_found"))
                return

        chat_id = utils.get_chat_id(message)
        user_id = user.id
        
        if (str(chat_id) in self.locked_users and 
            str(user_id) in self.locked_users[str(chat_id)]):
            del self.locked_users[str(chat_id)][str(user_id)]
            
            if not self.locked_users[str(chat_id)]:
                del self.locked_users[str(chat_id)]
                
            self.db.set("AutoReplyLock", "locked", self.locked_users)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat = await message.get_chat()
            chat_title = chat.title if hasattr(chat, 'title') else "Private Chat"
            
            await self._notify(
                self.strings("user_unlocked").format(
                    f"@{user.username}" if user.username else get_display_name(user)
                ) + f"\n\n–ß–∞—Ç: {chat_title} (ID: {chat_id})"
            )
        else:
            await self._notify(self.strings("not_in_list"))

    async def locklistcmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        chat_id = utils.get_chat_id(message)
        chat = await message.get_chat()
        chat_title = chat.title if hasattr(chat, 'title') else "Private Chat"
        
        if str(chat_id) not in self.locked_users or not self.locked_users[str(chat_id)]:
            await self._notify(f"{self.strings('list_empty')} {chat_title} (ID: {chat_id})")
            return

        res = self.strings("lock_list").format(chat_title)
        for user_id, text in self.locked_users[str(chat_id)].items():
            try:
                user = await message.client.get_entity(int(user_id))
                name = f"@{user.username}" if user.username else get_display_name(user)
                res += f"‚Ä¢ {name}: {text}\n"
            except: 
                res += f"‚Ä¢ ID:{user_id}: {text}\n"

        await self._notify(res)

    @loader.watcher()
    async def watcher(self, message: Message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        if not isinstance(message, Message) or message.out or not message.sender_id:
            return

        chat_id = utils.get_chat_id(message)
        user_id = message.sender_id
        
        if user_id <= 0:
            return

        chat_str = str(chat_id)
        user_str = str(user_id)
        
        if chat_str not in self.locked_users or user_str not in self.locked_users[chat_str]:
            return

        current_time = time.time()
        last_time = self.last_message_time.get(user_str, 0)
        
        if current_time - last_time < self.cooldown:
            return
            
        self.last_message_time[user_str] = current_time

        text = self.locked_users[chat_str][user_str]
        
        try:
            await message.client.send_message(
                entity=chat_id,
                message=text,
                reply_to=message.id
            )
        except Exception:
            pass
