import os
import json
import time
from pyrogram import Client, filters
from pyrogram.types import Message
from exteragram import ExteraGramPlugin

class AutoReplyLock(ExteraGramPlugin):
    id = "autoreply_lock_kastyan"
    name = "AutoReplyLock by Kastyan"
    version = "0.001"
    author = "Kastyan"
    description = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    async def on_load(self):
        self.data_file = "kastyan_autoreply.json"
        self.locked_users = {}
        self.last_reply_time = {}
        self.load_data()

    def load_data(self):
        if os.path.exists(self.data_file):
            with open(self.data_file, 'r') as f:
                data = json.load(f)
                self.locked_users = data.get('users', {})
                self.last_reply_time = data.get('time', {})

    def save_data(self):
        data = {
            'users': self.locked_users,
            'time': self.last_reply_time
        }
        with open(self.data_file, 'w') as f:
            json.dump(data, f, indent=4)

    async def _notify(self, client: Client, text: str):
        await client.send_message("me", f"üîî AutoReplyLock:\n{text}")

    @ExteraGramPlugin.on_cmd(
        command="lock",
        usage="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (.lock @user —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–≤–µ—Ç)"
    )
    async def lock_cmd(self, client: Client, message: Message):
        try:
            if message.reply_to_message:
                user = message.reply_to_message.from_user
                text = " ".join(message.command[1:])
            else:
                if len(message.command) < 3:
                    return await message.edit("‚ùå –ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç: .lock @user —Ç–µ–∫—Å—Ç")
                user = await client.get_users(message.command[1])
                text = " ".join(message.command[2:])

            chat_id = str(message.chat.id)
            user_id = str(user.id)

            if chat_id not in self.locked_users:
                self.locked_users[chat_id] = {}

            self.locked_users[chat_id][user_id] = text
            self.save_data()

            await message.edit(f"‚úÖ {user.first_name} –¥–æ–±–∞–≤–ª–µ–Ω")
            await self._notify(client, 
                f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ {message.chat.title or '–õ–°'}\n"
                f"üë§ {user.first_name} (@{user.username or '–Ω–µ—Ç'})\n"
                f"üí¨ –¢–µ–∫—Å—Ç: {text}"
            )
            await message.delete()
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @ExteraGramPlugin.on_cmd(
        command="unlock",
        usage="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (.unlock @user –∏–ª–∏ –æ—Ç–≤–µ—Ç)"
    )
    async def unlock_cmd(self, client: Client, message: Message):
        try:
            if message.reply_to_message:
                user = message.reply_to_message.from_user
            else:
                if len(message.command) < 2:
                    return await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ: .unlock @user")
                user = await client.get_users(message.command[1])

            chat_id = str(message.chat.id)
            user_id = str(user.id)

            if chat_id in self.locked_users and user_id in self.locked_users[chat_id]:
                del self.locked_users[chat_id][user_id]
                self.save_data()
                await message.edit(f"‚úÖ {user.first_name} —É–¥–∞–ª–µ–Ω")
                await self._notify(client,
                    f"–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ {message.chat.title or '–õ–°'}\n"
                    f"üë§ {user.first_name} (@{user.username or '–Ω–µ—Ç'})"
                )
            else:
                await message.edit("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            await message.delete()
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @ExteraGramPlugin.on_cmd(
        command="locklist",
        usage="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö"
    )
    async def list_cmd(self, client: Client, message: Message):
        try:
            chat_id = str(message.chat.id)
            if chat_id not in self.locked_users or not self.locked_users[chat_id]:
                return await message.edit("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")

            users = []
            for user_id, text in self.locked_users[chat_id].items():
                try:
                    user = await client.get_users(int(user_id))
                    name = f"@{user.username}" if user.username else user.first_name
                    users.append(f"‚Ä¢ {name}: {text}")
                except:
                    users.append(f"‚Ä¢ ID {user_id}: {text}")

            await self._notify(client,
                f"–°–ø–∏—Å–æ–∫ –≤ {message.chat.title or '–õ–°'}\n\n" +
                "\n".join(users)
            )
            await message.edit("‚úÖ –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
            await message.delete()
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @ExteraGramPlugin.on_message(filters.incoming & ~filters.me & ~filters.service)
    async def watcher(self, client: Client, message: Message):
        try:
            if not message.from_user:
                return

            chat_id = str(message.chat.id)
            user_id = str(message.from_user.id)
            current_time = time.time()

            if (chat_id in self.locked_users and 
                user_id in self.locked_users[chat_id] and
                current_time - self.last_reply_time.get(user_id, 0) > 1.0):

                await message.reply(self.locked_users[chat_id][user_id])
                self.last_reply_time[user_id] = current_time
        except:
            pass

def __load__():
    return AutoReplyLock()
