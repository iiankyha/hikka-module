import json
import time
from base_plugin import BasePlugin, HookResult, HookStrategy
from android_utils import run_on_ui_thread, log
from ui.bulletin import BulletinHelper
from java.io import File

__id__ = "kastyan_autoreply"
__name__ = "AutoReply by Kastyan"
__description__ = "Автоматический ответ на сообщения. Команды: .lock @user текст, .unlock @user, .locklist"
__author__ = "Kastyan"
__version__ = "1.1"
__min_version__ = "11.12.0"
__icon__ = "plugin232/2"

class AutoReplyPlugin(BasePlugin):
    def on_plugin_load(self):
        self.locked_users = {}
        self.last_reply_time = {}
        self.load_data()
        
        self.add_on_send_message_hook()
        self.add_on_receive_message_hook()
        log(f"[AutoReply] Плагин загружен v{self.version}")

    def get_plugin_file(self, filename):
        # Получаем путь к файлам плагина через API AYUGram
        context = self.getApplicationContext()
        return File(context.getFilesDir(), filename)

    def load_data(self):
        try:
            data_file = self.get_plugin_file("autoreply_data.json")
            if data_file.exists():
                with open(data_file.getPath(), 'r') as f:
                    data = json.load(f)
                    self.locked_users = data.get('users', {})
                    self.last_reply_time = data.get('time', {})
        except Exception as e:
            log(f"[AutoReply] Load error: {e}")

    def save_data(self):
        try:
            data_file = self.get_plugin_file("autoreply_data.json")
            with open(data_file.getPath(), 'w') as f:
                json.dump({
                    'users': self.locked_users,
                    'time': self.last_reply_time
                }, f)
        except Exception as e:
            log(f"[AutoReply] Save error: {e}")

    def on_send_message_hook(self, account, params):
        try:
            if not hasattr(params, "message"):
                return HookResult()

            msg = params.message.strip()
            
            if msg.startswith('.lock ') and len(msg.split()) >= 3:
                _, user, *text = msg.split()
                chat_id = str(params.peer_id)
                self.locked_users.setdefault(chat_id, {})[user.strip('@')] = ' '.join(text)
                self.save_data()
                BulletinHelper.show_success(f"Добавлен автоответ для {user}")
                params.message = ""
                return HookResult(strategy=HookStrategy.MODIFY, params=params)
            
            elif msg.startswith('.unlock '):
                user = msg.split()[1].strip('@')
                chat_id = str(params.peer_id)
                if chat_id in self.locked_users and user in self.locked_users[chat_id]:
                    del self.locked_users[chat_id][user]
                    self.save_data()
                    BulletinHelper.show_success(f"Удалён автоответ для @{user}")
                else:
                    BulletinHelper.show_error("Пользователь не найден")
                params.message = ""
                return HookResult(strategy=HookStrategy.MODIFY, params=params)
            
            elif msg == '.locklist':
                chat_id = str(params.peer_id)
                if chat_id in self.locked_users and self.locked_users[chat_id]:
                    users = [f"@{u}: {t}" for u, t in self.locked_users[chat_id].items()]
                    BulletinHelper.show_info("Автоответы:\n" + "\n".join(users))
                else:
                    BulletinHelper.show_info("Список пуст")
                params.message = ""
                return HookResult(strategy=HookStrategy.MODIFY, params=params)
                
        except Exception as e:
            log(f"[AutoReply] Command error: {e}")
            BulletinHelper.show_error(f"Ошибка: {e}")
        
        return HookResult()

    def on_receive_message_hook(self, account, params):
        try:
            if not hasattr(params, "sender_id"):
                return HookResult()

            chat_id = str(params.peer_id)
            user_id = str(params.sender_id)
            current_time = time.time()

            if (chat_id in self.locked_users and 
                user_id in self.locked_users[chat_id] and
                current_time - self.last_reply_time.get(user_id, 0) > 1.0):
                
                params.reply_message = self.locked_users[chat_id][user_id]
                self.last_reply_time[user_id] = current_time
                return HookResult(strategy=HookStrategy.MODIFY, params=params)
                
        except Exception as e:
            log(f"[AutoReply] Reply error: {e}")
            
        return HookResult()
