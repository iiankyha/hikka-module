import json
import time
from base_plugin import BasePlugin
from android_utils import log, show_toast
from java.io import File

__id__ = "kastyan_autoreply"
__name__ = "AutoReply by Kastyan"
__description__ = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç. –ö–æ–º–∞–Ω–¥—ã: .lock @user —Ç–µ–∫—Å—Ç, .unlock @user, .locklist"
__author__ = "Kastyan"
__version__ = "1.4"
__min_version__ = "11.12.0"
__icon__ = "plugin232/2"

class AutoReplyPlugin(BasePlugin):
    def on_plugin_load(self):
        log("[AutoReply] –ü–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
        self.data_file = File(self.getApplicationContext().getFilesDir(), "kastyan_autoreply.json")
        self.locked_users = {}
        self.last_reply = {}
        self.load_data()
        log(f"[AutoReply] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.locked_users)} —á–∞—Ç–æ–≤")
        show_toast("AutoReply loaded!")

    def load_data(self):
        try:
            if self.data_file.exists():
                with open(self.data_file.getPath(), 'r') as f:
                    data = json.load(f)
                    self.locked_users = data.get('users', {})
                    self.last_reply = data.get('time', {})
                    log("[AutoReply] –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    def save_data(self):
        try:
            with open(self.data_file.getPath(), 'w') as f:
                json.dump({
                    'users': self.locked_users,
                    'time': self.last_reply
                }, f, indent=2)
            log("[AutoReply] –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def on_command(self, command, peer_id, args):
        try:
            chat_id = str(peer_id)
            log(f"[AutoReply] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {command} {args} –≤ —á–∞—Ç–µ {chat_id}")

            if command == "lock" and len(args) >= 2:
                user = args[0].strip('@')
                text = ' '.join(args[1:])
                if chat_id not in self.locked_users:
                    self.locked_users[chat_id] = {}
                self.locked_users[chat_id][user] = text
                self.save_data()
                show_toast(f"‚úÖ –û—Ç–≤–µ—Ç –¥–ª—è @{user} –¥–æ–±–∞–≤–ª–µ–Ω")
                log(f"[AutoReply] –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è @{user}: {text}")
                return True

            elif command == "unlock" and args:
                user = args[0].strip('@')
                if chat_id in self.locked_users and user in self.locked_users[chat_id]:
                    del self.locked_users[chat_id][user]
                    self.save_data()
                    show_toast(f"‚ùå –û—Ç–≤–µ—Ç –¥–ª—è @{user} —É–¥–∞–ª—ë–Ω")
                    log(f"[AutoReply] –£–¥–∞–ª—ë–Ω –æ—Ç–≤–µ—Ç –¥–ª—è @{user}")
                else:
                    show_toast("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return True

            elif command == "locklist":
                users = []
                if chat_id in self.locked_users:
                    users = [f"@{u}" for u in self.locked_users[chat_id].keys()]
                msg = "–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã: " + (', '.join(users) if users else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
                show_toast(msg)
                log(f"[AutoReply] –°–ø–∏—Å–æ–∫: {msg}")
                return True

        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {e}")
            show_toast(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
        return False

    def on_send_message(self, account, peer_id, message):
        try:
            msg = message.strip()
            log(f"[AutoReply] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}")

            if msg.startswith('.lock '):
                if self.on_command("lock", peer_id, msg[6:].split()):
                    return ""  # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            elif msg.startswith('.unlock '):
                if self.on_command("unlock", peer_id, msg[8:].split()):
                    return ""

            elif msg == '.locklist':
                if self.on_command("locklist", peer_id, []):
                    return ""

        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return None

    def on_message(self, account, peer_id, sender_id, message):
        try:
            chat_id = str(peer_id)
            user_id = str(sender_id)
            current_time = time.time()
            log(f"[AutoReply] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –≤ {chat_id}")

            if chat_id in self.locked_users and user_id in self.locked_users[chat_id]:
                last_time = self.last_reply.get(user_id, 0)
                if current_time - last_time > 1.0:
                    reply = self.locked_users[chat_id][user_id]
                    self.last_reply[user_id] = current_time
                    log(f"[AutoReply] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞: {reply}")
                    return reply

        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return None
