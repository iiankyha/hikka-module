import json
import time
from base_plugin import BasePlugin
from android_utils import log
from ui.bulletin import BulletinHelper
from java.io import File

__id__ = "kastyan_autoreply"
__name__ = "AutoReply by Kastyan"
__description__ = "Автоматический ответ на сообщения. Команды: .lock @user текст, .unlock @user, .locklist"
__author__ = "Kastyan"
__version__ = "1.3"
__min_version__ = "11.12.0"
__icon__ = "plugin232/2"

class AutoReplyPlugin(BasePlugin):
    def on_plugin_load(self):
        self.locked_users = {}
        self.last_reply_time = {}
        self.load_data()
        self.add_on_send_message_hook()
        log(f"[AutoReply] Плагин инициализирован v{self.version}")

    def get_data_file(self):
        context = self.getApplicationContext()
        return File(context.getFilesDir(), "kastyan_autoreply.json")

    def load_data(self):
        try:
            data_file = self.get_data_file()
            if data_file.exists():
                with open(data_file.getPath(), 'r') as f:
                    data = json.load(f)
                    self.locked_users = data.get('users', {})
                    self.last_reply_time = data.get('time', {})
        except Exception as e:
            log(f"[AutoReply] Ошибка загрузки: {e}")

    def save_data(self):
        try:
            data_file = self.get_data_file()
            with open(data_file.getPath(), 'w') as f:
                json.dump({
                    'users': self.locked_users,
                    'time': self.last_reply_time
                }, f, indent=2)
        except Exception as e:
            log(f"[AutoReply] Ошибка сохранения: {e}")

    def process_command(self, command, peer_id, args):
        try:
            chat_id = str(peer_id)
            
            if command == "lock" and len(args) >= 2:
                user = args[0].strip('@')
                text = ' '.join(args[1:])
                self.locked_users.setdefault(chat_id, {})[user] = text
                self.save_data()
                BulletinHelper.show_success(f"Добавлен ответ для @{user}")
                return True
                
            elif command == "unlock" and args:
                user = args[0].strip('@')
                if chat_id in self.locked_users and user in self.locked_users[chat_id]:
                    del self.locked_users[chat_id][user]
                    self.save_data()
                    BulletinHelper.show_success(f"Удалён ответ для @{user}")
                else:
                    BulletinHelper.show_error("Пользователь не найден")
                return True
                
            elif command == "locklist":
                users = []
                if chat_id in self.locked_users:
                    users = [f"@{u}: {t}" for u, t in self.locked_users[chat_id].items()]
                BulletinHelper.show_info("Автоответы:\n" + ('\n'.join(users) if users else "Список пуст"))
                return True
                
        except Exception as e:
            log(f"[AutoReply] Ошибка команды {command}: {e}")
            BulletinHelper.show_error(f"Ошибка: {e}")
        
        return False

    def on_send_message(self, account, peer_id, message):
        try:
            msg = message.strip()
            if msg.startswith('.lock '):
                if self.process_command("lock", peer_id, msg[6:].split()):
                    return ""  # Пустое сообщение удалит оригинал
                    
            elif msg.startswith('.unlock '):
                if self.process_command("unlock", peer_id, msg[8:].split()):
                    return ""
                    
            elif msg == '.locklist':
                if self.process_command("locklist", peer_id, []):
                    return ""
                    
        except Exception as e:
            log(f"[AutoReply] Ошибка обработки: {e}")
        
        return None  # Не изменяем сообщение

    def on_message(self, account, peer_id, sender_id, message):
        try:
            chat_id = str(peer_id)
            user_id = str(sender_id)
            current_time = time.time()

            if (chat_id in self.locked_users and 
                user_id in self.locked_users[chat_id] and
                current_time - self.last_reply_time.get(user_id, 0) > 1.0):
                
                self.last_reply_time[user_id] = current_time
                return self.locked_users[chat_id][user_id]
                
        except Exception as e:
            log(f"[AutoReply] Ошибка ответа: {e}")
        
        return None
