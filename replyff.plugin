import os
import json
import time
from pyrogram import Client, filters
from pyrogram.types import Message
from exteragram import ExteraGramPlugin

class AutoReplyLock(ExteraGramPlugin):
    __version__ = "1.0"
    __author__ = "YourName"
    
    def __init__(self):
        super().__init__()  # –í–∞–∂–Ω–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞
        self.locked_users = {}
        self.last_message_time = {}
        self.cooldown = 1.0
        self.data_file = "autoreply_lock.json"
        self.load_data()

    def load_data(self):
        if os.path.exists(self.data_file):
            with open(self.data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
                self.locked_users = data.get("locked_users", {})
                self.last_message_time = data.get("last_message_time", {})

    def save_data(self):
        data = {
            "locked_users": self.locked_users,
            "last_message_time": self.last_message_time
        }
        with open(self.data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

    async def _notify(self, client: Client, text: str):
        try:
            await client.send_message("me", text)
        except:
            pass

    @ExteraGramPlugin.on_cmd(
        command="lock",
        usage="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (.lock @user —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
    )
    async def lock_command(self, client: Client, message: Message):
        if message.reply_to_message:
            user = message.reply_to_message.from_user
            text = " ".join(message.command[1:]) if len(message.command) > 1 else ""
        else:
            if len(message.command) < 3:
                await message.edit("‚ùå –§–æ—Ä–º–∞—Ç: <code>.lock @user —Ç–µ–∫—Å—Ç</code> –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return
            try:
                user = await client.get_users(message.command[1])
                text = " ".join(message.command[2:])
            except:
                await message.edit("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

        if not text:
            await message.edit("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞")
            return

        chat_id = message.chat.id
        user_id = user.id

        if str(chat_id) not in self.locked_users:
            self.locked_users[str(chat_id)] = {}

        self.locked_users[str(chat_id)][str(user_id)] = text
        self.save_data()

        chat_title = message.chat.title or "–õ–°"
        await self._notify(
            client,
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: <b>{user.first_name}</b>\n"
            f"üìù –¢–µ–∫—Å—Ç: <code>{text}</code>\n"
            f"üí¨ –ß–∞—Ç: <code>{chat_title}</code> (ID: {chat_id})"
        )
        await message.delete()

    @ExteraGramPlugin.on_cmd(
        command="unlock",
        usage="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (.unlock @user –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
    )
    async def unlock_command(self, client: Client, message: Message):
        if message.reply_to_message:
            user = message.reply_to_message.from_user
        else:
            if len(message.command) < 2:
                await message.edit("‚ùå –§–æ—Ä–º–∞—Ç: <code>.unlock @user</code> –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return
            try:
                user = await client.get_users(message.command[1])
            except:
                await message.edit("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

        chat_id = message.chat.id
        user_id = user.id

        if (str(chat_id) in self.locked_users and 
            str(user_id) in self.locked_users[str(chat_id)]):
            del self.locked_users[str(chat_id)][str(user_id)]
            self.save_data()
            
            chat_title = message.chat.title or "–õ–°"
            await self._notify(
                client,
                f"‚úÖ –£–¥–∞–ª—ë–Ω: <b>{user.first_name}</b>\n"
                f"üí¨ –ß–∞—Ç: <code>{chat_title}</code> (ID: {chat_id})"
            )
            await message.delete()
        else:
            await message.edit("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ", del_in=5)

    @ExteraGramPlugin.on_cmd(
        command="locklist",
        usage="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    async def locklist_command(self, client: Client, message: Message):
        chat_id = message.chat.id
        chat_title = message.chat.title or "–õ–°"

        if str(chat_id) not in self.locked_users or not self.locked_users[str(chat_id)]:
            await self._notify(client, f"‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç –¥–ª—è —á–∞—Ç–∞ <code>{chat_title}</code>")
            return

        res = f"üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –≤ <b>{chat_title}</b>:\n\n"
        for user_id, text in self.locked_users[str(chat_id)].items():
            try:
                user = await client.get_users(int(user_id))
                name = f"@{user.username}" if user.username else user.first_name
                res += f"‚Ä¢ <b>{name}</b>: <code>{text}</code>\n"
            except:
                res += f"‚Ä¢ ID <code>{user_id}</code>: <code>{text}</code>\n"

        await self._notify(client, res)
        await message.delete()

    @ExteraGramPlugin.on_message(filters.incoming & ~filters.me & ~filters.service)
    async def watcher(self, client: Client, message: Message):
        if not message.from_user:
            return

        chat_id = message.chat.id
        user_id = message.from_user.id
        user_str = str(user_id)
        chat_str = str(chat_id)

        if (chat_str not in self.locked_users or 
            user_str not in self.locked_users[chat_str]):
            return

        current_time = time.time()
        last_time = self.last_message_time.get(user_str, 0)
        if current_time - last_time < self.cooldown:
            return

        self.last_message_time[user_str] = current_time
        text = self.locked_users[chat_str][user_str]

        try:
            await message.reply(text)
        except:
            pass
