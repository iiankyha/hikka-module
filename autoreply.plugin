import json
import time
from base_plugin import BasePlugin
from android_utils import log
from ui.bulletin import BulletinHelper
from java.io import File, FileOutputStream, FileInputStream

__id__ = "kastyan_autoreply"
__name__ = "AutoReply by Kastyan"
__description__ = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –ö–æ–º–∞–Ω–¥—ã: .lock @user —Ç–µ–∫—Å—Ç, .unlock @user, .locklist"
__author__ = "Kastyan"
__version__ = "3.0"
__min_version__ = "11.12.0"
__icon__ = "plugin232/2"

class AutoReplyPlugin(BasePlugin):
    def on_plugin_load(self):
        log("[AutoReply] –ü–ª–∞–≥–∏–Ω –∑–∞–ø—É—â–µ–Ω")
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–∞
            self.data_dir = File(self.getApplicationContext().getFilesDir(), "autoreply_data")
            if not self.data_dir.exists():
                self.data_dir.mkdirs()
            
            # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            self.data_file = File(self.data_dir, "users.json")
            
            self.locked_users = {}
            self.last_reply = {}
            self.load_data()
            BulletinHelper.show_success("‚úÖ AutoReply –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            BulletinHelper.show_error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")

    def load_data(self):
        try:
            if self.data_file.exists() and self.data_file.length() > 0:
                fis = FileInputStream(self.data_file)
                data_bytes = fis.read()
                fis.close()
                
                data = json.loads(data_bytes.decode("utf-8"))
                self.locked_users = data.get("users", {})
                self.last_reply = data.get("time", {})
                log(f"[AutoReply] –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.locked_users)} —á–∞—Ç–æ–≤")
        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            BulletinHelper.show_error(f"üö´ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    def save_data(self):
        try:
            data = {
                "users": self.locked_users,
                "time": self.last_reply
            }
            
            fos = FileOutputStream(self.data_file)
            data_str = json.dumps(data)
            fos.write(data_str.encode("utf-8"))
            fos.close()
            log("[AutoReply] –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            BulletinHelper.show_error(f"üö´ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

    def process_command(self, command, peer_id, args):
        try:
            chat_id = str(peer_id)
            
            if command == "lock" and len(args) >= 2:
                username = args[0].strip('@')
                text = ' '.join(args[1:])
                
                if chat_id not in self.locked_users:
                    self.locked_users[chat_id] = {}
                    
                self.locked_users[chat_id][username] = text
                self.save_data()
                BulletinHelper.show_success(f"‚úÖ –û—Ç–≤–µ—Ç –¥–ª—è @{username} –¥–æ–±–∞–≤–ª–µ–Ω")
                return True
                
            elif command == "unlock" and len(args) >= 1:
                username = args[0].strip('@')
                
                if chat_id in self.locked_users and username in self.locked_users[chat_id]:
                    del self.locked_users[chat_id][username]
                    self.save_data()
                    BulletinHelper.show_success(f"‚ùå –û—Ç–≤–µ—Ç –¥–ª—è @{username} —É–¥–∞–ª—ë–Ω")
                    return True
                else:
                    BulletinHelper.show_error("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                    
            elif command == "locklist":
                result = []
                if chat_id in self.locked_users:
                    for user, text in self.locked_users[chat_id].items():
                        result.append(f"@{user}: {text}")
                
                if result:
                    BulletinHelper.show_info("üîí –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã:\n" + "\n".join(result))
                else:
                    BulletinHelper.show_info("üì≠ –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç")
                return True
                
        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
            BulletinHelper.show_error(f"üö´ –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
        
        return False

    def on_send_message(self, account, peer_id, message):
        try:
            msg = message.strip()
            
            if msg.startswith('.lock '):
                args = msg[6:].split()
                if len(args) >= 2 and self.process_command("lock", peer_id, args):
                    return ""  # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    
            elif msg.startswith('.unlock '):
                args = msg[8:].split()
                if args and self.process_command("unlock", peer_id, args):
                    return ""
                    
            elif msg == '.locklist':
                if self.process_command("locklist", peer_id, []):
                    return ""
                    
        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
            BulletinHelper.show_error(f"üö´ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        
        return None  # –ù–µ –∏–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    def on_message(self, account, peer_id, sender_id, message):
        try:
            chat_id = str(peer_id)
            user_id = str(sender_id)
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if chat_id in self.locked_users and user_id in self.locked_users[chat_id]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
                last_time = self.last_reply.get(user_id, 0)
                if current_time - last_time > 1.0:  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
                    self.last_reply[user_id] = current_time
                    return self.locked_users[chat_id][user_id]
                    
        except Exception as e:
            log(f"[AutoReply] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            BulletinHelper.show_error(f"üö´ –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        
        return None  # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º

    def on_plugin_unload(self):
        log("[AutoReply] –ü–ª–∞–≥–∏–Ω –≤—ã–≥—Ä—É–∂–µ–Ω")
        self.save_data()
