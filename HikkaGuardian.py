from hikka import loader, utils
from telethon.tl.types import Message, PeerUser
from datetime import datetime
import asyncio
import logging
from cryptography.fernet import Fernet
import json
import re

logger = logging.getLogger(__name__)

class HikkaGuardianDB:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º"""
    def __init__(self):
        self.key = Fernet.generate_key()
        self.cipher = Fernet(self.key)
        self.data = None
        self.load()

    def _init_default_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.data = {
            "filters": {
                "important": [],
                "neutral": [],
                "blocked": []
            },
            "reminders": {},
            "diary": []
        }

    def save(self):
        try:
            if self.data is None:
                self._init_default_data()
                
            with open("hikkaguardian.enc", "wb") as f:
                encrypted = self.cipher.encrypt(
                    json.dumps(self.data).encode()
                )
                f.write(encrypted)
        except Exception as e:
            logger.error(f"DB Save Error: {str(e)}")

    def load(self):
        try:
            with open("hikkaguardian.enc", "rb") as f:
                decrypted = self.cipher.decrypt(f.read()).decode()
                self.data = json.loads(decrypted)
        except FileNotFoundError:
            self._init_default_data()
            self.save()
        except json.JSONDecodeError:
            logger.error("DB corrupted, creating new one")
            self._init_default_data()
            self.save()
        except Exception as e:
            logger.error(f"DB Load Error: {str(e)}")
            self._init_default_data()

@loader.tds
class HikkaGuardianMod(loader.Module):
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ö–∏–∫–∏–∫–æ–º–æ—Ä–∏"""
    strings = {
        "name": "HikkaGuardian",
        "meal_reminder": "üç± –í—Ä–µ–º—è –ø–æ–µ—Å—Ç—å! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: {}",
        "sleep_reminder": "üåô –ü–æ—Ä–∞ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫–æ —Å–Ω—É. –ò–¥–µ–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {}¬∞C",
        "filter_help": "‚ùå –§–æ—Ä–º–∞—Ç: .hgfilter <—Ç–∏–ø> <—Å–ø–∏—Å–æ–∫_—Å–ª–æ–≤>",
        "diary_success": "üìñ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫",
        "stats_header": "üå∏ **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n–ó–∞–ø–∏—Å–µ–π: {}\n–í–∞–∂–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {}\n–ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {}"
    }

    __dependencies__ = ["cryptography"]

    def __init__(self):
        self.config = loader.ModuleConfig(
            "MEAL_TIMES", ["10:00", "13:00", "19:00"],
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –µ–¥–µ",
            "SLEEP_TIME", "23:00",
            "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–Ω–µ",
            "AUTO_DELETE", True,
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"
        )
        self.db = HikkaGuardianDB()
        self.reminder_task = None

    async def client_ready(self, client, db):
        self.client = client
        if self.db.data is None:
            self.db._init_default_data()
        self._start_reminders()

    def _start_reminders(self):
        async def reminder_loop():
            while True:
                try:
                    now = datetime.now().strftime("%H:%M")
                    
                    if now in self.config["MEAL_TIMES"]:
                        await self.client.send_message(
                            "me",
                            self.strings("meal_reminder").format("–≥—Ä–µ—á–∫–∞ —Å –æ–≤–æ—â–∞–º–∏")
                        )
                    
                    if now == self.config["SLEEP_TIME"]:
                        await self.client.send_message(
                            "me",
                            self.strings("sleep_reminder").format(22)
                        )
                    
                    await asyncio.sleep(60)
                except Exception as e:
                    logger.error(f"Reminder Error: {str(e)}")
                    await asyncio.sleep(300)

        if not self.reminder_task or self.reminder_task.done():
            self.reminder_task = asyncio.create_task(reminder_loop())

    async def watcher(self, message: Message):
        """–°–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not isinstance(message.peer_id, PeerUser):
                return

            if self.db.data is None:
                self.db._init_default_data()

            if self.config["AUTO_DELETE"]:
                text = (message.text or "").lower()
                blocked_words = self.db.data["filters"]["blocked"]
                
                if blocked_words:
                    pattern = re.compile(
                        "|".join(map(re.escape, blocked_words)),
                        flags=re.IGNORECASE
                    )
                    if pattern.search(text):
                        await message.delete()
                        await self.client.send_message(
                            "me",
                            "üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"
                        )

            sender = await message.get_sender()
            if str(sender.id) in self.db.data["filters"]["important"]:
                await message.pin()

        except Exception as e:
            logger.error(f"Watcher Error: {str(e)}")

    @loader.unrestricted
    async def hgfiltercmd(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: .hgfilter <—Ç–∏–ø> <—Å–ª–æ–≤–∞>"""
        try:
            args = utils.get_args_raw(message).split(" ", 1)
            if len(args) < 2:
                await utils.answer(message, self.strings("filter_help"))
                return

            filter_type, content = args
            if filter_type not in self.db.data["filters"]:
                await utils.answer(
                    message,
                    f"‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(self.db.data['filters'].keys())}"
                )
                return

            self.db.data["filters"][filter_type] = [
                item.strip() for item in content.split(",")
            ]
            self.db.save()
            await utils.answer(
                message,
                f"‚úÖ –§–∏–ª—å—Ç—Ä '{filter_type}' –æ–±–Ω–æ–≤–ª–µ–Ω!"
            )
        except Exception as e:
            logger.error(f"Filter Error: {str(e)}")
            await utils.answer(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤")

    @loader.unrestricted
    async def hgdiarycmd(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫: .hgdiary <—Ç–µ–∫—Å—Ç>"""
        try:
            entry = utils.get_args_raw(message)
            if not entry:
                await utils.answer(message, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏")
                return

            self.db.data["diary"].append({
                "date": datetime.now().isoformat(),
                "text": entry
            })
            self.db.save()
            await utils.answer(message, self.strings("diary_success"))
        except Exception as e:
            logger.error(f"Diary Error: {str(e)}")
            await utils.answer(message, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏")

    @loader.unrestricted
    async def hgstatcmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: .hgstat"""
        try:
            stats = self.strings("stats_header").format(
                len(self.db.data["diary"]),
                len(self.db.data["filters"]["important"]),
                len(self.db.data["filters"]["blocked"])
            )
            await utils.answer(message, stats)
        except Exception as e:
            logger.error(f"Stats Error: {str(e)}")
            await utils.answer(message, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def setup(client):
    await client.load_module(HikkaGuardianMod())
