from hikka import loader, utils
from telethon.tl.types import Message
from telethon.errors import ChatWriteForbidden, FloodWaitError
import random
import asyncio
import logging

@loader.tds
class CubeSpamMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫—É–±–∏–∫–æ–≤ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
    strings = {"name": "CubeSpam"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            "default_interval", 
            10, 
            lambda: "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–µ–∫—É–Ω–¥—ã)"
        )
        self.task = None
        self.interval = self.config["default_interval"]
        self.emoji_map = {
            1: "üé≤ 1Ô∏è‚É£",
            2: "üé≤ 2Ô∏è‚É£",
            3: "üé≤ 3Ô∏è‚É£",
            4: "üé≤ 4Ô∏è‚É£",
            5: "üé≤ 5Ô∏è‚É£",
            6: "üé≤ 6Ô∏è‚É£"
        }
        self.log = logging.getLogger(__name__)

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self._me = await client.get_me()
        self.log.info("CubeSpam module initialized")

    async def _spam_loop(self):
        self.log.info("Spam loop started")
        while True:
            try:
                if not self._client.is_connected():
                    await self._client.connect()
                
                chat = await self._client.get_input_entity(self.chat_id)
                num = random.randint(1, 6)
                
                await self._client.send_message(
                    entity=chat,
                    message=self.emoji_map[num],
                    silent=True
                )
                self.log.debug(f"Sent cube {num} to {self.chat_id}")
                
                await asyncio.sleep(self.interval)
                
            except ChatWriteForbidden:
                self.log.error("No permissions to send messages")
                await self._stop_spam()
                break
            except FloodWaitError as e:
                self.log.warning(f"Flood wait: {e.seconds} seconds")
                await asyncio.sleep(e.seconds + 5)
            except Exception as e:
                self.log.error(f"Critical error: {repr(e)}")
                await self._stop_spam()
                break

    async def _stop_spam(self):
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
            self.task = None
        self.log.info("Spam stopped")

    @loader.command
    async def cubespam(self, message: Message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å/–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º –∫—É–±–∏–∫–∞–º–∏"""
        args = utils.get_args_raw(message)
        
        if self.task and not self.task.done():
            await self._stop_spam()
            await utils.answer(message, "üö´ –°–ø–∞–º —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return

        try:
            self.interval = int(args) if args else self.config["default_interval"]
            if self.interval < 3:
                await utils.answer(message, "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 3 —Å–µ–∫—É–Ω–¥")
                return
        except ValueError:
            await utils.answer(message, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ò—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            self.interval = self.config["default_interval"]

        self.chat_id = message.chat_id
        self.log.info(f"Starting spam in {self.chat_id} with interval {self.interval}s")
        
        try:
            self.task = asyncio.create_task(self._spam_loop())
            await utils.answer(message, f"üé≤ –°–ø–∞–º –∑–∞–ø—É—â–µ–Ω!\n–ß–∞—Ç: {self.chat_id}\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval} —Å–µ–∫")
        except Exception as e:
            await utils.answer(message, f"üî• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
            self.log.exception("Startup failed")

    async def on_unload(self):
        await self._stop_spam()
        self.log.info("Module unloaded")
