from hikka import loader, utils
from telethon.tl.types import Message
import random
import asyncio

@loader.tds
class CubeSpamMod(loader.Module):
    """–°–ø–∞–º –∫—É–±–∏–∫–æ–º —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±—ã—Ö —á–∞—Ç–∞—Ö)"""
    strings = {"name": "CubeSpam"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            "default_interval", 10, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
        )
        self.task = None
        self.interval = self.config["default_interval"]
        self.emoji_map = {
            1: "üé≤ 1Ô∏è‚É£",
            2: "üé≤ 2Ô∏è‚É£",
            3: "üé≤ 3Ô∏è‚É£",
            4: "üé≤ 4Ô∏è‚É£",
            5: "üé≤ 5Ô∏è‚É£",
            6: "üé≤ 6Ô∏è‚É£"
        }
        self.chat_id = None

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç
        self.chat_id = self._db.get("CubeSpam", "chat_id", None)

    async def spam_cube(self):
        while True:
            try:
                num = random.randint(1, 6)
                await self._client.send_message(
                    self.chat_id,
                    self.emoji_map[num]
                )
                await asyncio.sleep(self.interval)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
                await self.stop_spam()
                break

    async def stop_spam(self):
        if self.task and not self.task.done():
            self.task.cancel()
        self.task = None

    @loader.command
    async def cubespam(self, message: Message):
        """- –∑–∞–ø—É—Å—Ç–∏—Ç—å/–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º (–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)"""
        args = utils.get_args_raw(message)
        
        # –ï—Å–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if self.task and not self.task.done():
            await self.stop_spam()
            await utils.answer(message, "üõë –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π chat_id
        self.chat_id = message.chat_id
        self._db.set("CubeSpam", "chat_id", self.chat_id)

        # –ü–∞—Ä—Å–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        try:
            self.interval = int(args) if args else self.config["default_interval"]
        except ValueError:
            await utils.answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∞–º
        self.task = asyncio.create_task(self.spam_cube())
        await utils.answer(message, f"üé≤ –°–ø–∞–º –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {self.interval} —Å–µ–∫")

    async def on_unload(self):
        await self.stop_spam()
