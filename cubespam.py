from hikka import loader, utils
from telethon.tl.types import Message
import random
import asyncio
import logging

@loader.tds
class CubeSpamMod(loader.Module):
    """–°–ø–∞–º —ç–º–æ–¥–∑–∏-–∫—É–±–∏–∫–∞–º–∏ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
    strings = {"name": "CubeSpam"}
    
    __version__ = (1, 0, 2)
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "interval",
                10,
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                validator=loader.validators.Integer(minimum=3)
            )
        )
        self.task = None
        self.log = logging.getLogger(__name__)
        self.emoji_cubes = [
            "üé≤ 1Ô∏è‚É£", "üé≤ 2Ô∏è‚É£", "üé≤ 3Ô∏è‚É£",
            "üé≤ 4Ô∏è‚É£", "üé≤ 5Ô∏è‚É£", "üé≤ 6Ô∏è‚É£"
        ]

    async def client_ready(self, client, db):
        self._client = client
        self._db = db

    async def spam_task(self):
        while True:
            try:
                await self._client.send_message(
                    self.chat_id,
                    random.choice(self.emoji_cubes)
                )
                await asyncio.sleep(self.config["interval"])
            except Exception as e:
                self.log.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
                break

    @loader.command
    async def cubestart(self, message: Message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–∞–º –∫—É–±–∏–∫–∞–º–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        if self.task and not self.task.done():
            await utils.answer(message, "üö´ –°–ø–∞–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
            
        self.chat_id = message.chat_id
        self.task = asyncio.create_task(self.spam_task())
        await utils.answer(
            message,
            f"üé≤ –°–ø–∞–º –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {self.config['interval']} —Å–µ–∫\n"
            "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É .cubestop"
        )

    @loader.command
    async def cubestop(self, message: Message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º"""
        if self.task and not self.task.done():
            self.task.cancel()
            await utils.answer(message, "üõë –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            await utils.answer(message, "‚ÑπÔ∏è –°–ø–∞–º –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω")

    async def on_unload(self):
        if self.task:
            self.task.cancel()
