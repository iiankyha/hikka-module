from hikka import loader, utils
from telethon.tl.types import Message
from telethon.errors import ChatWriteForbidden, FloodWaitError
import random
import asyncio
import logging

@loader.tds
class CubeSpamMod(loader.Module):
    """–°–ø–∞–º –∫—É–±–∏–∫–∞–º–∏ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
    strings = {"name": "CubeSpam"}
    
    requirements = {
        "telethon": "telethon>=1.28.0",
        "hikkatl": "hikkatl>=1.0.0"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "default_interval", 
            10,
            "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
        )
        self.task = None
        self.active = False
        self.interval = self.config["default_interval"]
        self.chat_id = None
        self.emoji_map = {
            1: "üé≤ 1Ô∏è‚É£",
            2: "üé≤ 2Ô∏è‚É£",
            3: "üé≤ 3Ô∏è‚É£",
            4: "üé≤ 4Ô∏è‚É£",
            5: "üé≤ 5Ô∏è‚É£",
            6: "üé≤ 6Ô∏è‚É£"
        }
        self.log = logging.getLogger(__name__)

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self._me = await client.get_me()
        self.log.info("–ú–æ–¥—É–ª—å CubeSpam –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def spam_loop(self):
        while self.active:
            try:
                if not self.chat_id:
                    self.log.error("Chat ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    break
                
                num = random.randint(1, 6)
                await self._client.send_message(
                    self.chat_id,
                    self.emoji_map[num]
                )
                self.log.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É–±–∏–∫: {num}")
                await asyncio.sleep(self.interval)
                
            except ChatWriteForbidden:
                self.log.error("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
                await self.stop_spam()
                break
            except FloodWaitError as e:
                self.log.warning(f"–§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å: –∂–¥–µ–º {e.seconds} —Å–µ–∫")
                await asyncio.sleep(e.seconds + 5)
            except Exception as e:
                self.log.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
                await self.stop_spam()
                break

    async def stop_spam(self):
        if self.task and not self.task.done():
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        self.active = False
        self.task = None
        self.log.info("–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    @loader.command
    async def cubespam(self, message: Message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å/–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º –∫—É–±–∏–∫–∞–º–∏"""
        args = utils.get_args_raw(message)
        
        if self.active:
            await self.stop_spam()
            await utils.answer(message, "üõë –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return

        try:
            self.interval = int(args) if args else self.config["default_interval"]
            if self.interval < 3:
                await utils.answer(message, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 3 —Å–µ–∫—É–Ω–¥—ã")
                return
        except ValueError:
            await utils.answer(message, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ò—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            self.interval = self.config["default_interval"]

        self.chat_id = message.chat_id
        self._db.set("CubeSpam", "chat_id", self.chat_id)
        self.active = True
        self.task = asyncio.create_task(self.spam_loop())
        
        await utils.answer(
            message,
            f"üé≤ –°–ø–∞–º –∑–∞–ø—É—â–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ!\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval} —Å–µ–∫\n"
            f"–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ"
        )

    async def on_unload(self):
        await self.stop_spam()
        self.log.info("–ú–æ–¥—É–ª—å –≤—ã–≥—Ä—É–∂–µ–Ω")
