from hikka import loader, utils
from telethon.tl.types import Message
import random
import asyncio
import logging

@loader.tds
class UserCubeSpam(loader.Module):
    """–°–ø–∞–º –∫—É–±–∏–∫–∞–º–∏ –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    strings = {"name": "UserCubeSpam"}
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            "interval", 
            10,
            "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
        )
        self.task = None
        self.log = logging.getLogger(__name__)
        self.cubes = ["üé≤ 1Ô∏è‚É£", "üé≤ 2Ô∏è‚É£", "üé≤ 3Ô∏è‚É£", "üé≤ 4Ô∏è‚É£", "üé≤ 5Ô∏è‚É£", "üé≤ 6Ô∏è‚É£"]

    async def client_ready(self, client, db):
        self._client = client
        self._db = db

    async def cube_loop(self):
        while True:
            try:
                await self._client.send_message(
                    self.target_chat,
                    random.choice(self.cubes)
                )
                await asyncio.sleep(self.config["interval"])
            except Exception as e:
                self.log.error(f"–û—à–∏–±–∫–∞: {str(e)}")
                await self.stop_spam()
                break

    @loader.command
    async def cubego(self, message: Message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ"""
        if self.task:
            await utils.answer(message, "‚ùå –°–ø–∞–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
            
        # –†—É—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        try:
            interval = int(utils.get_args_raw(message)) if utils.get_args_raw(message) else self.config["interval"]
            if interval < 5:
                await utils.answer(message, "üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 5 —Å–µ–∫—É–Ω–¥!")
                return
        except ValueError:
            await utils.answer(message, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª! –ò—Å–ø–æ–ª—å–∑—É—é 10 —Å–µ–∫")
            interval = 10
            
        self.target_chat = message.chat_id
        self.config["interval"] = interval
        self.task = asyncio.create_task(self.cube_loop())
        await utils.answer(message, f"‚úÖ –°–ø–∞–º –∑–∞–ø—É—â–µ–Ω!\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫")

    @loader.command
    async def cubestop(self, message: Message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º"""
        if self.task:
            self.task.cancel()
            self.task = None
            await utils.answer(message, "üõë –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            await utils.answer(message, "‚ÑπÔ∏è –°–ø–∞–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")

    async def on_unload(self):
        if self.task:
            self.task.cancel()
